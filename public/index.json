[{"content":" I remember vividly why I wanted to write code. I wanted to be a hacker\u0026hellip;\nWhen .com was free, people built their websites using frontpage or notepad.Websites looked very different than now. Blinking texts were the coolest thing you could put on your website, and marquee meant you could have a news bar; static nevertheless, so you need to change the HTML and upload the page using FTP again every time you need something new to show up. I am not going to talk about connecting a database to your website because, frankly, I didn\u0026rsquo;t know what a database is even back then.Circa that time, WindowsXP was around the corner, I was a recurring guest to internet cafes, and I noticed some websites looked shady, with skull pictures and lists of numbers or passwords. I tried to talk to the people who were using these websites to know what is it. But they didn\u0026rsquo;t help. They just mentioned that they were hackers.Of course, it was not true that they were hackers -no hacker will tell you he\u0026rsquo;s a hacker, right ?-, I mean, they might use some tools or software - as I learned them later - to crack into someone\u0026rsquo;s computer or steal his mail\u0026rsquo;s password. But they didn\u0026rsquo;t know how to write a trojan or what\u0026rsquo;s a password dictionary. Anyhow, that was how I started to get into the rabbit\u0026rsquo;s hole. What followed was years of doing script kiddy\u0026rsquo;s stuff, using sub7 and prorat, guessing a lot of passwords when it was possible, bombing CGI\u0026rsquo;s, cracking into DB\u0026rsquo;s, and getting credit cards. I lived in a country where there weren\u0026rsquo;t laws against that at all back then.\nI knew I lacked something.I didn\u0026rsquo;t want to use someone else\u0026rsquo;s software.I needed to write viruses myself. I wanted to know how to write a worm that makes me super cool like Zero Cool in the movie Hackers_._As you can see, I was very young and naive.\nOne day, I found: How To Become A Hacker, by Eric Steven Raymond.I couldn\u0026rsquo;t comprehend the whole article. I was merely searching on how to become a real hacker. And that article contained a full section towards that goal.\nBasic Hacking Skills\nLearn how to program. That was it, I will learn programming languages so I can be a hacker, I didn\u0026rsquo;t know the reason, but programming languages and viruses must be connected. No wonder.\nYears later, I forgot about hacking completely being a teenager and living my age, but I was always good with machines. I started learning programming languages in college at some point as I went to study computer science. I started with C# and ASP.NET. Started doing freelancing as a side job and earning money was a good sign that I made the right decision.\nThree years passed, and I still felt I lacked real programming skills. Programming can\u0026rsquo;t be a visual studio where I can drop textbox in a website, and that\u0026rsquo;s it. While I respect all that, it just didn\u0026rsquo;t fulfil my inner hungry for black screens and command lines.\nBy 2014 I started learning Ruby and Rails by contributing to one of the well-known open publishing websites back then, just like medium but for Arabic people. I even wrote about it here.\nBy 2015 I was already working as a ruby on rails developer in Cairo. Black screens were the norm for me, Vim was the text-editor/IDE of choice, and ubuntu was my distro. I made it, mom.\nAlmost 6 Years passed since I made the transition from Microsoft stack to open source. In contrast, Microsoft is now prominent in the open-source world. Back then, it was still lingering on the closed side of things.From Fullstack Rails developer to Back end to cloud engineering,my life changed by thinking that programming was connected to hacking. My life changed by reading \u0026ldquo;How to become a hacker\u0026rdquo; and falling in love with solving problems.\n","permalink":"https://ahmgeek.com/posts/how-to-become-a-hacker/","summary":"I remember vividly why I wanted to write code.  I wanted to be a hacker\u0026hellip;","title":"How \"How to become a hacker\" changed my life"},{"content":"Just starting to make writing in English a habit again, so I will make this post short and sweet.\nThis year I\u0026rsquo;ve only read 12 books. I will put my picks of 2020 here.\nAt the Existentialist Café: Freedom, Being, and Apricot Cocktails - Sarah Bakewell Rapport sur moi (Report on myself) - Grégoire Bouillier The Waste Land - T. S. Eliot El prisionero del cielo (The Prisoner of Heaven) - Carlos Ruiz Zafón Briefe an einen jungen Dichter (Letters to a Young Poet) - Rainer Maria Rilke Sachlicher Bericht über das Glück, ein Morphinist zu sein (Short Treatise on the Joys of Morphinism) - Hans Fallada As enormously as I\u0026rsquo;d like to talk about these books, I know that reading\u0026rsquo;s taste opposes from one person to another. And, to be completely frank, I seldom review my books. Growing up with reading taught me to appreciate the book and absorb it more than showing the people why I like it. Reading is personal.\n","permalink":"https://ahmgeek.com/posts/my-2020-in-books/","summary":"As much as I\u0026rsquo;d like to talk about these books, I know that reading\u0026rsquo;s taste differs from one person to another\u0026hellip;","title":"My 2020 in books"},{"content":" Originally written for: Runtastic\u0026rsquo;s tech blog\nHOW DOES IT BEGIN? Usually, on boarding in a new job passes in a slow rhythm during the first couple of months. That was the case with me at least, getting to know how our infrastructure at Runtastic is built, how the services interact with each other, how to monitor services you are responsible for, reading the guidelines, etc.\nShortly after I joined, I got to build a prototype with one of my new teammates. We were on track, and we got to monitor a release of a new service within our team’s responsibilities; we got a quick training on how to monitor the release and what numbers we need to look at. We knew what to do, as the knowledge transferred a couple of days before the release, and everything was good to go.\nAnd technically speaking, the release performed well internally and for some trusted users a couple of weeks before the shout out and telling the public, so no problems were expected.\nThe morning of the release was fun. I had just arrived at my desk and my colleague said, “The workers are down.”\nTHE FIRST TALE: KNOW YOUR LIMITS We run our microservices with jRuby. It’s efficient, and we have real threading. We also use Sidekiq with Redis for running background jobs. I tell you this, because it’s important to know the potential impact of the stack you use.\nBasically, we had increasing numbers of the dead jobs set in our workers servers.\nWe also have an automatic mechanism to shut down the workers if the dead set reached specific limits; Sidekiq has a (default) limit of 10,000 jobs which can be stored as dead jobs. A dead job is a job that exceeds its retry limit and is not configured to skip the dead jobs queue.\nWhen reaching the limit, jobs are lost, hence the mechanism:\nsidekiq_retries_exhausted do |msg| if Sidekiq::DeadSet.new.size \u0026gt; (Sidekiq.options[:dead_max_jobs] - DEAD_JOBS_THRESHOLD) Sidekiq::CLI.instance.launcher.quiet end end And we ended up with a non-working service with a dead set full of jobs with “too many open files” errors.\nFor that error to show up, you could have hit the limit imposed by your OS for the file descriptors, or maybe the limit itself is a bit low during your server provisioning phase. Also the process of your web server could be behaving weirdly.\nulimit -a is a *nix tool, which could help you identify most of the resources’ limits in your box.\nWe need the file descriptor one – ulimit -n– which gives you the limit of open files in your machine.\nIt turned out we have a high number of open files across all of the processes. We also used lsof to see how many files our server process opens:\nlsof | awk '{ print $2; }' | uniq -c | sort -rn | head\nI will let you find out what this command does as homework – feel free to leave a comment about it.\nAs the number of open files was really high, we were looking into the file manipulation we do in our service more closely:\nYou can use File.open in ruby in two ways: with a block or without it.\nFile.open(\u0026#39;foo\u0026#39;, \u0026#39;w\u0026#39;) do |file| # Do stuff with file file.write \u0026#34;bar\u0026#34; end file = File.open(\u0026#39;foo\u0026#39;, \u0026#39;w\u0026#39;) # Do stuff with file file.write \u0026#34;bar\u0026#34; file.close It turned out we used the latter, where we should close the file after reading it ourselves. We closed the file, but if an exception happens before we close the file, it will remain open.\nSo we added an ensure clause:\ndef method file = File.open(foo, \u0026#39;w+\u0026#39;) # Processing and stuff ensure file.close end After patching and closing the files properly and communicating with the OPS team to increase the limits in our servers, the issue came back the next day.\nAt this point, we revised most of the code we open files in and tried to see what’s wrong there, but we found nothing.\nIT’S ALWAYS IN THE LOGS A temporary fix was to monitor when we reach the file limits and restart the process. This worked until we figured out the issue.\nThe next morning I opened New Relic and tried to trace the error one more time. Hidden between the stack trace there was a line from a third party library.\nWe used an unofficial gem (shareable libraries are called “gems” in the ruby world) to manipulate vendor specific XML files, because the official SDK for working with these XML files was written in Java.\nIt turned out that the unofficial gem opened the files, did some processing, and closed the files, but again, if something failed in between, it would remain open.\nI patched a fork of the gem and deployed it and also pointed out this issue to the maintainer so he could fix it.\nThe open files error didn’t show up as quickly as before. Thankfully my teammate focused on speeding up finalization of the gem we are building (a ruby wrapper around the official SDK) and we had it done quickly. We replaced the old gem with it, and we have never been happier.\nTHE SECOND TALE, WHERE’S MY DATA? One day someone approached our desks and said, “I noticed something weird, I did some running sessions yesterday and tracked it with my smartwatch, but some sessions were missing.”\nThis was related somehow with the release we did, the service basically worked as an importer for the XML files from the watches and supported hardware into our system. So when you have a sports session, you could find it under your Runtastic account, if you connected them, of course.\nI consider myself a Rubyist; I use ruby as my main language because I love it, I read about “_why the lucky stiff” and knew lots of what was in the community even before becoming part of it. I know that ruby has no real threads because of the GIL thingy. Before even starting using the language, I never had to worry about the threading issue before and was happy using MRI anyway, but now this haunted me.\nFrom the figure above, you get a general overview of how jRuby has a real threading model. So if you use jRuby, you need to make sure your code is thread-safe, otherwise you will have a pleasant time debugging weird errors.\njRuby by default ensures the standard libraries are thread-safe for you. After a bit of investigation, I found we silence_stream used from active_support, which is not thread-safe. I removed it. We also tried to revise most of the code to make sure we are not abusing memoization or += incrementers as most of these are not thread safe. The real issue is we don’t use threaded code, so this bug comes from a hidden place. Also reproducing a bug like this locally is really hard; as you know, thread-safe bugs are pain in the ass.\nWe went deeper to know where the places are which we could put shared data between threads and tried to do some tests for the new gem we built. Since it’s a wrapper around a Java SDK, which acts as a black box to us, we wanted to make sure the issue doesn’t come from there first.\nCOUNTDOWNLATCH AS A TESTING MECHANISM One of our architects suggested using CountDownLatch for testing the gem thread-safeness.\nThe idea was simple: I start reading files inside a thread and before processing the files, I latch the thread. I do the same in a second thread. Then I countdown and let the threads race to process the files.\nrequire \u0026#34;concurrent\u0026#34; it \u0026#34;is a thread-safe\u0026#34; do latch = Concurrent::CountDownLatch.new(1) sample_1_records = nil sample_2_records = nil t1 = Thread.new do file = nil File.open(\u0026#34;./spec/xml_samples/sample1.xml\u0026#34;) do |f| latch.wait file = XmlDecoder::Reader.new(f.to_inputstream).read end sample_1_records = file.sessions.last.records end t2 = Thread.new do file = nil File.open(\u0026#34;./spec/xml_samples/sample2.xml\u0026#34;) do |f| latch.wait file = XmlDecoder::Reader.new(f.to_inputstream).read end sample_2_records = file.sessions.last.records end latch.count_down t1.join t2.join expect(sample_1_records.size).to eq(2518) expect(sample_1_records.last.altitude).to eq(2242.800048828125) expect(sample_2_records.size).to eq(406) expect(sample_2_records.last.cadence).to eq(76) end I got unstable results, which means the gem has a thread-safe bug. Looking quickly into the code we found that we used instance variables inside modules, which means they are module variables and shared between threads.\nmodule XmlDecoder def self.read(inputstream) # Not so good. @activity = Activity.new end end module XmlDecoder def self.read(inputstream) activity = Activity.new end end That went off our radars, so we quickly bumped the gem and deployed it. And we are back to being happy again**.**\nTHE THIRD TALE, PATCHING PRODUCTION CODE, OR HOW I STOPPED WORRYING AND LET IT GO No matter what, production has its own rules. We always act like we don’t patch directly on production, always hot fixing code instead. We talk about best practices, reproduce it locally first. We shun those who say they don’t actually follow the rules, while in critical situations, you really need to act quickly and sometimes stop the bleeding first before it can heal.\nOne day, we merged a Pull Request and deployed it to production, but all of our servers couldn’t get up. Workers were down, servers were down. It was weird that the PR and tests passed the CI and most of the environments, but failed on production, which should be no surprise within the wild and harsh land of production.\nGetting into the server and trying to read the logs, the error was mentioning a model we’d never had a problem with before. I commented out a suspicious line within that file, restarted the server, and the process came up; The line was basically just re-defining an already defined dry-struct object. With dry-struct, if you initialize struct attributes, you can’t define it or alter it anymore. It’s immutable and this is why we use it.\nRemoving that line fixed the issue. For some reason, the error was tolerant in CI and testing environments and just showed the error in console, which for some reason got swallowed. Tests were passing, which just caused a fatal error in production.\nWorking with assumptions on production is a bad way to mitigate an issue, but in the wonderland of production you might compromise a little bit to get stuff working until the main fix lands. You need to stop the bleed before healing in a clean way.\nYou also need some luck; trust me.\n","permalink":"https://ahmgeek.com/posts/tales-from-the-wild-hunting-and-squashing-production-bugs/","summary":"Usually, on boarding in a new job passes in a slow rhythm during the first couple of months. That was the case with me at least, getting to know how our infrastructure at Runtastic is built..","title":"Hunting Production Bugs"},{"content":"What if I told you a truth that no-one knows except me?A shocking truth, that might change you entirely.Condoning the ways about how this truth came to me,Will you believe it ?\nSometimes you need to shock people in order for them to realize the ultimatum. It’s a life experience after all, and people adapt..\nIn order to make you believe the truth that I know, I need to convince you of the opposite of all of your beliefs, life experiences, memories and change your overall consciousness. That’s why I believe letting the truth shock you is the most effective way.\nPeople make assumptions all the time, I know that for a fact, I actually hear it sometimes, when people say things like “Oh, I thought you were a religious person”. That was an assumption, they assumed something about you, then they were shocked that they were wrong most of the time, but they adapt, if they had it in them to accept the truth about you first of course. But, don’t mistake assumptions for judgments, they are different.\nI believe I am the king of demolishing assumptions and icons. Sounds arrogant eh? Well, I get irritated easily when people make assumptions in front of me, or judge someone in front of me, I then shock them with most of my beliefs, again you don’t need to know them really, but if you insist, I’ll mention a tiny one of my beliefs; I believe that we’re not that important, we will die, we’re all gonna die, There are only a few of whom got the luck to leave a legacy for humans, Hitler was one of those by the way. And even, after some time? Humans will become extinct. It’s Inevitable.\nThese are my beliefs, and again they’re not important, they only belong to me, and me only. I don’t try to feed them to people. However, people always try to convince you with their thoughts and beliefs. They all assume something about you, then when they’re shocked at the truth about you, they may judge you by being stupid at best.\nI know a method that helps me in these situation, I have been using it for sometime now, and it works perfectly.\nFirstly, I try to be a quiet person, and a good listener. I try to find out what assumptions have been made against me. Then I shock them with the truth in a nice way. I can’t tell you the sauce of this step, it’s a gift.I swear.\nWith the nice way of shocking others, you will gain over 85% of people’s acceptance, you don’t need anyone’s acceptance by the way, fuck them and fuck their assumptions, but in a work environment for instance, you need most of the people’s acceptance, because you do lots of social engagements with them and because you need to help the poor beings to acquire the natural norm of brotherhood that you have.\nAfter your granted acceptance, if you add a hint of satire and joy in every word you say, they will adapt. They will feel you’re the person who says what they can’t because of the general appearance in society, and because you believe that society needs to go fuck itself, you never feel sorry for words you say. Don’t forget, satire and joy. Delight them, the poor humans need that.\nHabitual comes last, it’s the end of every thing, when you train a human about some habits, and they do it for a while, it becomes a part of their lives. It happens when you brush your teeth every morning. that’s you accepting the truth about the unpleasant smell of your breath, and that is you training yourself to gain a habit of brushing your teeth every morning. A simple cycle that works for complex humans.\nThere’s an issue though about my method, when people get used to your joy and satire, specially in a working environment, you will fight them to take you seriously when you need to, and sometimes, they will be skeptic about your professionalism at work. That’s the moment when you know you need to balance between who you are and how you should act.\nI fail at implementing this actually, and that’s OK for me! I can convince people to take me seriously in a lot of ways, but perhaps not at first. That’s why Balancing is a good way to handle these situations, it’s not the only way of course as I don’t use it.\nWhen I say humans being bros, I mean humans being bros, being a brother to your fellow humans, infecting their lives with joy, and being a valuable professional one when life needs to be. It’s a hard formula and balancing may fail here from time to time, but you will succeed at this, because I believe that every human has it inside them, you only need to accept the truth, adapt to it, and to make a habit out of it..\nEnjoy your life, live as you’re play.\n","permalink":"https://ahmgeek.com/posts/a-journey-from-acceptability-to-habituality/","summary":"What if I told you a truth that no-one knows except me?A shocking truth, that might change you entirely.Condoning the ways about how this truth came to me,Will you believe it ?","title":"A journey from Acceptability to habituality"},{"content":" Our story is one of those stories, that embody mixtures of fun, thrill and good advice. And as most of the stories, it’s exposing us to the human being itself; his desires, that in turns plays a main role in his life philosophy.\nOur story begins with a poor kid, not that kind of poverty that involves a very deep miserable state in life that needs a huge amount of fights against the Capitalism force of the world.No, he was poor because he wanted to write about his sadness, his wounds that got thickens by bad days. but he couldn’t find a place to vomits all of that.Well, he is a developer, and we all know that most of the developers - maybe all of them - have blogs. And blogs are not a suitable place for these kind of writing.\nSuddenly, while he was wiping his tears, eating pizza to healing his wounds, surfing the dark side of Reddit. From nowhere, that Site opens up in front of him!Our poor kid knew Medium, actually he tried before to write on Medium, but the lacking of Arabic support prevented him from trying again…This Manshar thing, was different, it somehow was a clone of Medium, but in Arabic…\nthe Arabic publishing Platform Manshar مَنْشَر Another story begins little earlier, when Mohammad Khatib, noticed something weird while he was answering nature’s call.\nThe Arabic content on the web was too small, but no one really tried hard to solve this issue, even Wikipedia’s Arabic content, is much less than any other peer. “Weird grrrr”\nsaid Khatib while an echo of water droplets Audible from the scene’s background. Khatib started building Manshar along with a very small team distributed between Rammallah, Nables in Palestine and Mountain View in US as he works there in Google. The team has increased gradually since then including fellows from Egypt, and other Arabian countries as well.\nThe project wasn’t meant to be a replacement for Medium, like what china did with twitter, the project is meant to deliver a good writing experience for Arabian writers, and a medium for their voices to be heard. Also the intention of building it in the Open, and to indulges whoever wanted to involve in, refutes the Idea of “bad cloning”.Manshar still in the beta version. The team works when he has time to fix and maintain it. It’s very promising indeed…\nAhmad, our poor kid, after finding Manshar, was able enough to express his thoughts, also, was able to share it with the world… well, was almost able to share it!\nThe platform as a solid unit, as a package, as a site, or even as a medium, was still in the beta version, the users base still very small, very promising of course; people love it, but still, it’s small in size, small in features, small in the reaction base. the people prefer the social networks because of the condense of the content with the small length of the characters.Ahmad, has deleted his facebook account recently, he never felt good before that. “that shitty facebook thing is sneaky”.So, he decided to help Manshar getting more attention. and to give another sight for the people who prefer social media. He is a developer, the problem is, Manshar uses tools that Ahmad never knew before, but his determination, his intentions that we might be proud enough to quote on his behalf: “Let’s FUCKIN rock this lovely Manshar..”.was encouraging enough to let him start coding things that he never knew he able to code.\nAhmad, the full of shit dude and the bag of sweets team. This story needs a realistic vision. behind the scene, Ahmad was a Zero on the left beside the team. Manshar’s lovely team:\nThe real dude who takes the responsibility when all fellows runs, was Khatib, he pushes tons of code to the Repo, he is the almighty God of Mansahr, the one who takes care of everything, from guiding the team to revamping every single task that fails.\nHe speaks politely with the dudes who debates about technologies that runs Manshar, we all know that people who likes to debate and do nothing are just bags of shit, but let’s face it, we need to make our world a better place to raise kids that we will make sure they don’t fall in problems and hatred like us.. Right ? Hah ? Khatib was that kind of dudes, the democratic one, so he debates with almost everyone, trying to give and take rational speech about everything.\nRasha, the wizard of Manshar, she takes care of the UI/Front-End things along with whoever send decent pull requests to help paint Manshar. Rasha was the 2nd person in the team, so she was able to see the platform rise upon her eye’s sight. That gave here the wisdom of the wise. This wisdom illustrated when someone ran off the team; she say “Let’s remove that asshole from Slack”.\nRasha also helps with virtual meetings with the authors to take some feedbacks with the writing and even using the platform. In a short words, Rasha is awesome.\nYou see, it will be pure gibberish to talk about all of the team, we can shorten the words as “ they are awesome” specially that Gaber, Mad Hugs for you.\nAnd that’s dears, the wisest story at the mean time, the story that started with a poor kid, and ended while the poor kid has turned into a Manshar fetish kid. A kid who may fall in love and hate, may be sad, but will always write on Manshar to express his shit\n","permalink":"https://ahmgeek.com/posts/medium-for-arabs/","summary":"Our story is one of those stories, that embody mixtures of fun, thrill and good advice. And as most of the stories, it’s exposing us to the human being itself; his desires, that in turns plays a main role in his life philosophy.\nOur story begins with a poor kid, not that kind of poverty that involves a very deep miserable state in life that needs a huge amount of fights against the Capitalism force of the world.","title":"Medium For Arabs"}]